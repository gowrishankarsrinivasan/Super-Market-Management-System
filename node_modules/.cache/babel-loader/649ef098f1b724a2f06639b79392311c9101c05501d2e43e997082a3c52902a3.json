{"ast":null,"code":"export default {\n  data() {\n    return {\n      cartItems: []\n    };\n  },\n  computed: {\n    totalPrice() {\n      return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  },\n  methods: {\n    removeFromCart(id) {\n      this.cartItems = this.cartItems.filter(item => item.id !== id);\n    },\n    updateQuantity(item) {\n      if (item.quantity <= 0) {\n        this.removeFromCart(item.id);\n      }\n    },\n    checkout() {\n      // Implement checkout logic here\n    }\n  },\n  mounted() {\n    // Assuming the cart items are stored in local storage\n    const storedCartItems = JSON.parse(localStorage.getItem('cart')) || [];\n    this.cartItems = storedCartItems;\n  },\n  watch: {\n    cartItems: {\n      handler(newCartItems) {\n        localStorage.setItem('cart', JSON.stringify(newCartItems));\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["data","cartItems","computed","totalPrice","reduce","total","item","price","quantity","methods","removeFromCart","id","filter","updateQuantity","checkout","mounted","storedCartItems","JSON","parse","localStorage","getItem","watch","handler","newCartItems","setItem","stringify","deep"],"sources":["D:\\E-commerce\\FrontEnd\\my-vue3-project\\src\\components\\CartComponent.vue"],"sourcesContent":["<!-- <template>\r\n    <v-container>\r\n        <v-data-table :items=\"items\" :items-per-page=\"5\" :headers=\"headers\">\r\n            <template v-slot:top>\r\n                <v-toolbar flat>\r\n                    <v-toolbar-title>Item List</v-toolbar-title>\r\n                    <v-divider class=\"mx-4\" inset vertical></v-divider>\r\n                    <v-spacer></v-spacer>\r\n                    <v-dialog v-model=\"dialog\" max-width=\"500px\">\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-btn color=\"primary\" dark class=\"mb-2\" v-bind=\"attrs\" v-on=\"on\">\r\n                                Add Item\r\n                            </v-btn>\r\n                        </template>\r\n\r\n                        <v-card>\r\n                            <v-card-title>\r\n                                <span class=\"headline\">Add New Item</span>\r\n                            </v-card-title>\r\n                            <v-card-text>\r\n                                <v-container>\r\n                                    <v-row>\r\n                                        <v-col cols=\"12\" sm=\"6\" md=\"4\">\r\n                                            <v-text-field v-model=\"newItem.name\" label=\"Item Name\"></v-text-field>\r\n                                        </v-col>\r\n                                        <v-col cols=\"12\" sm=\"6\" md=\"4\">\r\n                                            <v-text-field v-model=\"newItem.price\" label=\"Price\"></v-text-field>\r\n                                        </v-col>\r\n                                        <v-col cols=\"12\" sm=\"6\" md=\"4\">\r\n                                            <v-text-field v-model=\"newItem.quantity\" label=\"Quantity\"></v-text-field>\r\n                                        </v-col>\r\n                                    </v-row>\r\n                                </v-container>\r\n                            </v-card-text>\r\n                            <v-card-actions>\r\n                                <v-spacer></v-spacer>\r\n                                <v-btn @click=\"dialog = false\">Cancel</v-btn>\r\n                                <v-btn @click=\"addItem\" color=\"primary\">Save</v-btn>\r\n                            </v-card-actions>\r\n                        </v-card>\r\n                    </v-dialog>\r\n                </v-toolbar>\r\n            </template>\r\n\r\n            <template v-slot:[`item.actions`]=\"{ item }\">\r\n                <div class=\"d-flex justify-space-between align-center\">\r\n                    <v-btn @click=\"editItem(item)\">\r\n                        <v-icon>mdi-pencil</v-icon>\r\n                    </v-btn>\r\n                    <v-btn @click=\"deleteItem(item)\">\r\n                        <v-icon>mdi-delete</v-icon>\r\n                    </v-btn>\r\n                </div>\r\n            </template>\r\n\r\n\r\n        </v-data-table>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"CartComponent\",\r\n    data() {\r\n        return {\r\n            dialog: false,\r\n            headers: [\r\n                { text: 'Item Name', value: 'name' },\r\n                { text: 'Price', value: 'price' },\r\n                { text: 'Quantity', value: 'quantity' },\r\n                { text: 'Actions', value: 'actions', sortable: false },\r\n            ],\r\n            items: [\r\n                // Sample data, replace with your actual data\r\n                { name: 'Item 1', price: 100, quantity: 2 },\r\n                { name: 'Item 2', price: 200, quantity: 5 },\r\n            ],\r\n            newItem: {\r\n                name: '',\r\n                price: '',\r\n                quantity: ''\r\n            }\r\n        };\r\n    },\r\n    methods: {\r\n        addItem() {\r\n            if (this.newItem.name && this.newItem.price && this.newItem.quantity) {\r\n                this.items.push({ ...this.newItem });\r\n                this.newItem.name = '';\r\n                this.newItem.price = '';\r\n                this.newItem.quantity = '';\r\n                this.dialog = false;\r\n            } else {\r\n                alert('Please fill out all fields');\r\n            }\r\n        },\r\n        editItem(item) {\r\n            // Add your edit logic here\r\n            alert(`Edit ${item.name}`);\r\n        },\r\n        deleteItem(item) {\r\n            this.items = this.items.filter(i => i !== item);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.headline {\r\n    font-weight: bold;\r\n}\r\n</style> -->\r\n\r\n\r\n// src/components/Cart.vue\r\n<template>\r\n    <div>\r\n        <h1>Your Cart</h1>\r\n        <div v-if=\"cartItems.length\">\r\n            <div v-for=\"item in cartItems\" :key=\"item.id\" class=\"cart-item\">\r\n                <img :src=\"item.image\" alt=\"item.name\" />\r\n                <div>{{ item.name }}</div>\r\n                <div>{{ item.price }}</div>\r\n                <input type=\"number\" v-model.number=\"item.quantity\" @change=\"updateQuantity(item)\" min=\"1\"/>\r\n                <button @click=\"removeFromCart(item.id)\">Remove</button>\r\n            </div>\r\n            <div class=\"total\">Total: {{ totalPrice }}</div>\r\n            <button @click=\"checkout\">Checkout</button>\r\n        </div>\r\n        <div v-else>\r\n            <p>Your cart is empty.</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            cartItems: []\r\n        };\r\n    },\r\n    computed: {\r\n        totalPrice() {\r\n            return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\r\n        }\r\n    },\r\n    methods: {\r\n        removeFromCart(id) {\r\n            this.cartItems = this.cartItems.filter(item => item.id !== id);\r\n        },\r\n        updateQuantity(item) {\r\n            if (item.quantity <= 0) {\r\n                this.removeFromCart(item.id);\r\n            }\r\n        },\r\n        checkout() {\r\n            // Implement checkout logic here\r\n        }\r\n    },\r\n    mounted() {\r\n        // Assuming the cart items are stored in local storage\r\n        const storedCartItems = JSON.parse(localStorage.getItem('cart')) || [];\r\n        this.cartItems = storedCartItems;\r\n    },\r\n    watch: {\r\n        cartItems: {\r\n            handler(newCartItems) {\r\n                localStorage.setItem('cart', JSON.stringify(newCartItems));\r\n            },\r\n            deep: true\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.cart-item {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n}\r\n.cart-item img {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-right: 10px;\r\n}\r\n.total {\r\n    font-weight: bold;\r\n    margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"AAwIA,eAAe;EACXA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAUA,CAAA,EAAG;MACT,OAAO,IAAI,CAACF,SAAS,CAACG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAI,GAAIC,IAAI,CAACC,KAAI,GAAID,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IACxF;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,cAAcA,CAACC,EAAE,EAAE;MACf,IAAI,CAACV,SAAQ,GAAI,IAAI,CAACA,SAAS,CAACW,MAAM,CAACN,IAAG,IAAKA,IAAI,CAACK,EAAC,KAAMA,EAAE,CAAC;IAClE,CAAC;IACDE,cAAcA,CAACP,IAAI,EAAE;MACjB,IAAIA,IAAI,CAACE,QAAO,IAAK,CAAC,EAAE;QACpB,IAAI,CAACE,cAAc,CAACJ,IAAI,CAACK,EAAE,CAAC;MAChC;IACJ,CAAC;IACDG,QAAQA,CAAA,EAAG;MACP;IAAA;EAER,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN;IACA,MAAMC,eAAc,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;IACtE,IAAI,CAACnB,SAAQ,GAAIe,eAAe;EACpC,CAAC;EACDK,KAAK,EAAE;IACHpB,SAAS,EAAE;MACPqB,OAAOA,CAACC,YAAY,EAAE;QAClBJ,YAAY,CAACK,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACF,YAAY,CAAC,CAAC;MAC9D,CAAC;MACDG,IAAI,EAAE;IACV;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}